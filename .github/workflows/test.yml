on: [push, pull_request]
name: Test
jobs:
  test:
    name: Unit tests
    env:
      GO111MODULE: on
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: install dependencies
      run: go mod download
    - name: Test
      run: go test ./...
  golint:
    name: Golint
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: latest
  gosec:
    name: Code security analyze
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-no-fail ./...'
      ### not available in provate repoe
      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     # Path to SARIF file relative to the root of the repository
      #     sarif_file: results.sarif
  docker:
    name: Docker build and push
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{secrets.DOCKER_REGISTRY}}
      IMAGE_NAME: ${{secrets.IMAGE_NAME}}
    steps:
      - name: Install Taskfile
        uses: arduino/setup-task@v1
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Docker build
        run: |
          task docker:build
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Docker push
        run: |
          IMAGE_VERSION=$GITHUB_SHA task docker:push
  integration-test-app-role:
    needs: ["docker"]
    name: Test vault app role auth
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{secrets.DOCKER_REGISTRY}}
      IMAGE_NAME: ${{secrets.IMAGE_NAME}}
      VAULT_ADDR: ${{secrets.VAULT_ADDR}}
      VAULT_TOKEN: ${{secrets.VAULT_TOKEN}}
    strategy:
      matrix:
        kubernetes: ["1.21.2"]
        #kubernetes: ["1.22.1","1.21.2","1.20.7","1.19.1","1.18.19"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Install Taskfile
        uses: arduino/setup-task@v1
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-integration-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-integration-
      - name: Install tools
        run: |
          task fetch:kind
          task fetch:vault
          task fetch:kubectl
      - name: Prepare app role config
        run: |
          mkdir -p tests/e2e/generated_manifests/
          go run cmd/deployer/main.go vault app-role -x app_role_${{ github.sha }} -m true
      - name: Create cluster
        run: IMAGE_VERSION=$GITHUB_SHA task cluster:create KUBERNETES_VERSION=${{ matrix.kubernetes }}
      - name: Delete cluster
        run: task cluster:delete
  integration-test-token:
    needs: ["docker"]
    name: Test vault token auth
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{secrets.DOCKER_REGISTRY}}
      IMAGE_NAME: ${{secrets.IMAGE_NAME}}
      VAULT_ADDR: ${{secrets.VAULT_ADDR}}
      VAULT_TOKEN: ${{secrets.VAULT_TOKEN}}
    strategy:
      matrix:
        kubernetes: ["1.21.2"]
        #kubernetes: ["1.22.1","1.21.2","1.20.7","1.19.1","1.18.19"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Install Taskfile
        uses: arduino/setup-task@v1
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-integration-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-integration-
      - name: Install tools
        run: |
          task fetch:kind
          task fetch:vault
          task fetch:kubectl
      - name: Prepare token config
        run:  |
          mkdir -p tests/e2e/generated_manifests/
          go run cmd/deployer/main.go vault token -x token_${{ github.sha }} -m true
      - name: Create cluster
        run: IMAGE_VERSION=$GITHUB_SHA task cluster:create KUBERNETES_VERSION=${{ matrix.kubernetes }}
      - name: Delete cluster
        run: task cluster:delete